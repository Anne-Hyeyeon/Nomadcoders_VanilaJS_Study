[2-11 Return]

1. console.log 대신 쓸 수 있는 것 

const calculator = {
    add: function (a,b) {
        console.log(a + b);
    },
    minus: function (a,b) {
        console.log(a - b);
    },
    divide: function (a,b) {
        console.log(a / b);
    },
    multifly: function (a,b) {
        console.log(a * b);
    },
    power: function (a,b) {
        console.log(a ** b);
    },
};

calculator.minus(5,3);
calculator.power(10,50);
calculator.multifly(12,40);

위 계산기에서, 이제 console.log 그만 사용해볼 것임. 왜냐하면 우리는 결과값을 function 밖에서 주로 얻을 것이기 때문임.
console.log는 콘솔에 결과 출력해주지만, 우리가 원하는 건 data를 받아 쓰거나 문서에 그걸 출력해주는 것임.
'데이터를 얻어서, 무언가를 해야 의미가 있다'


함수 : 내가 시킨 일을 수행할뿐만 아니라, 내가 원하는 결과값도 가져다줄 수 있음
콘솔이나 alert에서 얻는 게 아니라! 


const calculator = {
    add: function (a,b) {
        return a + b;
    },
    minus: function (a,b) {
        return a - b;
    },
    divide: function (a,b) {
        return a / b;
    },
    multifly: function (a,b) {
        return a * b;
    },
    power: function (a,b) {
        return a ** b;
    },
};

const plusResult = calculator.plus(2,3)
const minusResult calcaulator.minus(3.5)

return: 무언가를 실행하고 반환 값을 주는 것!
이 반환값 앞에 함수 넣어보기?!
이렇게 하면 결국 아무것도 안나오지만, plusResult값에 접근할 수 있다.

*리플 : console.log는 사실 그림의 떡, 꺼내 먹으려면 return이 필요.
주의사항 : 한번 return을 하면 해당 함수는 끝난다. 
따라서 return 뒤 작업을 하면 출력되지 않는다.
return은 말 자체로 다시 '돌려준다'는 뜻으로, 해당 함수의 변수값을 지정해주면 
해당 code를 안에서 실행해서 그 결과값을 변수한테 돌ㄹ려주는 것이다.
function 안의 작업들은 'return'까지만 수행된다.